version: '2.1'
orbs:
  aws-eks: circleci/aws-eks@2.0
  aws-ecr: circleci/aws-ecr@3.1.0
  kubernetes: circleci/kubernetes@1.0
  
jobs:
  lint:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/app

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - lint-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - lint-

      - run:
          name: install dependencies
          command: |
            make setup
            make activate
            make install
            
      - save_cache:
          paths:
            - ./capstone
          key: lint-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            make activate
            make lint

  buildDockerImage:
    machine: true
    working_directory: ~/app
    
    steps:
      - checkout
      - run:
          name: Setup common environment variables
          command: |
            echo 'export TAG=${DCKUSER}/capstone' >> $BASH_ENV
      - run:
          name: Build Image
          command: |
            docker build --tag=$TAG .
            echo $DCKPWD | docker login -u $DCKUSER --password-stdin
            docker run -d -p 8001:8000 $TAG
            sleep 10
            echo "Running check after docker run"
            check=`curl -s localhost:8001 | grep -c "^Simple Flask"`
            echo "Check result: "$check
            if [ 1 -ne $check ]; then echo "Post check build failed";exit 1;fi
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $TAG
      - persist_to_workspace:
          root: .
          paths:
            - docker-image

  pushDockerImageToECR:
    docker:
      - image: circleci/python:3.7.3-stretch
    
    working_directory: ~/app
    
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - attach_workspace:
          at: ./
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/app/capstone 
            . ~/app/capstone/bin/activate
            pip install awscli
      - run:
          name: Load image
          command: |
            docker load --input docker-image/image.tar
      - run:
          name: Tag image
          command: |
            IMAGEID=`docker images --format='{{.ID}}' | head -1`
            docker tag $IMAGEID $FULL_IMAGE_NAME
            echo 'export IMAGEID=$IMAGEID' >> $BASH_ENV
      - run:
          name: Push image to ECR
          command: |
            . ~/app/capstone/bin/activate
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$CIRCLE_SHA1
    
  deployApp:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          EKS cluster name
        type: string
      docker-image-name:
        description: |
          Docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Create deployment manifest
          command: |
            # Replace the placeholders in appDeploy.yml, to prevent hardcoding
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat deploy/appDeploy.yml.template |\
               sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|\
                g;s|BUILD_DATE|$BUILD_DATE|g;s|VERSION_INFO|\
                << parameters.version-info >>|g" > deploy/appDeploy.yml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "deploy/appDeploy.yml"
          get-rollout-status: true
          resource-name: deploy/pmallon_capstone
      - kubernetes/create-or-update-resource:
          resource-file-path: "deploy/appService.yml"
  
  testApp:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
      expected-version-info:
        description: |
          Expected app version to test the correct version has been deployed
        type: string
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
            sleep 30
            for attempt in {1..20}; do
              EXTERNAL_IP=$(kubectl get service pmallon_capstone | awk '{print $4}' | tail -n1)
              echo "Checking external IP: ${EXTERNAL_IP}"
              if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
                break
              fi
              echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
              sleep 10
            done
            sleep 120
            echo "External IP: "$EXTERNAL_IP
            curl -s --retry 10 "http://$EXTERNAL_IP" | grep "<< parameters.expected-version-info >>"
            
  rollBackApp:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/delete-resource:
          resource-types: "deployment,service"
          label-selector: "app=demo"
          wait: true
      - run:
          name: Check on pod status
          command: |
            kubectl get pods
    
    
workflows:
  default:
    jobs:
      - lint
      - buildDockerImage:
          requires: 
            - lint
      - pushDockerImageToECR:
          requires: 
            - buildDockerImage
      - aws-eks/create-cluster:
          cluster-name: $EKS_CLUSTERNAME
          aws-region: $AWS_DEFAULT_REGION
          requires: 
            - pushDockerImageToECR
      - deployApp:
          cluster-name: $EKS_CLUSTERNAME
          aws-region: $AWS_DEFAULT_REGION
          docker-image-name: "${AWS_ECR_ACCOUNT_URL}/capstone:${CIRCLE_SHA1}"
          version-info: "${CIRCLE_SHA1}"
          requires: 
            - aws-eks/create-cluster
      - testApp:
          cluster-name: $EKS_CLUSTERNAME
          aws-region: $AWS_DEFAULT_REGION
          expected-version-info: "${CIRCLE_SHA1}"
          requires: 
            - deployApp
      - rollBackApp:
          cluster-name: $EKS_CLUSTERNAME
          aws-region: $AWS_DEFAULT_REGION
          requires: 
            - testApp
      - aws-eks/delete-cluster:
          cluster-name: $EKS_CLUSTERNAME
          aws-region: $AWS_DEFAULT_REGION
          wait: true
          requires: 
            - rollBackApp