version: 2.1
jobs:
  lint:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/app

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - lint-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - lint-

      - run:
          name: install dependencies
          command: |
            make setup
            make activate
            make install
            
      - save_cache:
          paths:
            - ./capstone
          key: lint-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            make activate
            make lint

  buildDockerImage:
    #https://circleci.com/docs/2.0/building-docker-images/
    #docker:
    #  - image: circleci/golang:1.15
    #    auth:
    #      username: $DCKUSER
    #      password: $DCKPWD
    machine: true
    working_directory: ~/app
    
    steps:
      - checkout
      - run:
         name: Install dependencies
         command: |
           sudo apt update
           sudo apt install --assume-yes awscli
     # - setup_remote_docker:
     #      version: 19.03.13
     #      docker_layer_caching: true
 
      # build and push Docker image
      - run: |
          TAG=$DCKUSER/capstone
          docker build --tag=$TAG .
          echo $DCKPWD | docker login -u $DCKUSER --password-stdin
          docker run -d -p 8001:8000 $TAG
          sleep 10
          echo "Running check after docker run"
          check=`curl -s localhost:8001 | grep -c "^Simple Flask"`
          echo "Check result: "$check
          if [ 1 -eq $check ]
          then 
            echo "Check passed pushing image to dockerhub"
            # get AWS login
            #aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 312139106895.dkr.ecr.us-east-1.amazonaws.com
            docker login -u AWS -p $(aws ecr get-login-password --region us-east-1) 312139106895.dkr.ecr.us-east-1.amazonaws.com
            echo "Tagging image for ECR"
            

  pushImageToECR:
    docker:
      - image: amazon/aws-cli

    working_directory: ~/app
  
    steps:
      - run: |
          TAG=$DCKUSER/capstone
          echo $DCKPWD | docker login -u $DCKUSER --password-stdin
          docker pull $TAG
          if [ 1 -ne `docker image ls | grep $TAG`]; then exit 1;fi
          # get AWS login
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 312139106895.dkr.ecr.us-east-1.amazonaws.com
          echo "Tagging image for ECR"
          docker tag capstone:latest 312139106895.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
          echo "Pushing image to ECR"
          docker push 312139106895.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
  
  
workflows:
  default:
    jobs:
      - lint
      - buildDockerImage:
          requires: [lint]
      #  - pushImageToECR:
      #     requires: [buildDockerImage]
      #- startInfra
      #- 
      #    requires: [build-frontend]